 What is a Dockerfile?

A Dockerfile is a text file that contains instructions to build a Docker image. It automates the process of creating Docker containers by specifying the base image, environment variables, software dependencies, and commands needed to set up the environment.

Think of it as a recipe for building your application in a container.
-----------------------------------------------------------------------------------

 Common Dockerfile Instructions (a.k.a. "tags")

These Dockerfile instructions (often referred to as "tags" informally, though "instruction" is more accurate) are used to define how your image should be built.

1. FROM

    Purpose: Specifies the base image to build upon.

    Example:

    FROM python:3.10

    Explanation: This starts with the official Python 3.10 image. Every Dockerfile must start with FROM.

 

2. LABEL

    Purpose: Adds metadata to the image.

    Example:

    LABEL maintainer="you@example.com"

    Explanation: Helpful for documentation or automation tools.

3. RUN

    Purpose: Executes commands during the build of the image.

    Example:

    RUN apt-get update && apt-get install -y curl

    Explanation: Used to install dependencies or configure the environment.

4. COPY

    Purpose: Copies files/directories from the host machine to the image.

    Example:

    COPY . /app

    Explanation: Copies the current directory to /app inside the image.

5. ADD

    Purpose: Similar to COPY, but can also handle URLs and unpack tar archives.

    Example:

    ADD https://example.com/app.tar.gz /app/

    Explanation: Downloads and extracts the archive into /app/.

6. CMD

    Purpose: Sets the default command to run when the container starts.

    Example:

    CMD ["python", "app.py"]

    Explanation: This command runs when the container is executed, unless overridden.

7. ENTRYPOINT

    Purpose: Sets a fixed command that will always run in the container.

    Example:

    ENTRYPOINT ["python"]
    CMD ["app.py"]

    Explanation: ENTRYPOINT runs python, and CMD passes the argument app.py, resulting in python app.py.

8. ENV

    Purpose: Sets environment variables.

    Example:

    ENV APP_ENV=production

    Explanation: You can reference this variable later using $APP_ENV.

9. EXPOSE

    Purpose: Documents the port the container listens on.

    Example:

    EXPOSE 5000

    Explanation: Does not actually publish the port; just informs users and other containers.

10. WORKDIR

    Purpose: Sets the working directory for future instructions like RUN, CMD, and COPY.

    Example:

    WORKDIR /app

    Explanation: You don't need to keep writing full paths in later commands.

11. VOLUME

    Purpose: Declares mount points (persistent or shared storage).

    Example:

    VOLUME ["/data"]

    Explanation: Useful for storing logs, database files, etc.

12. ARG

    Purpose: Defines build-time variables.

    Example:

    ARG VERSION=1.0
    RUN echo "Building version $VERSION"

    Explanation: Passed during build using --build-arg VERSION=2.0.

13. USER

    Purpose: Specifies the user to use when running the image.

    Example:

    USER nobody

    Explanation: Enhances security by not running as root.

14. HEALTHCHECK

    Purpose: Defines how Docker checks if the container is healthy.

    Example:

    HEALTHCHECK CMD curl --fail http://localhost:80 || exit 1

    Explanation: Docker marks the container as ‚Äúunhealthy‚Äù if the command fails.

üß† Summary
Instruction	Purpose
FROM	      Base image
LABEL	      Metadata
RUN	     Shell commands during build
COPY	      Copy files from host
ADD	      Like COPY, with extra features
CMD	     Default command at runtime
ENTRYPOINT	Fixed command at runtime
ENV	       Set environment variables
EXPOSE    	Document exposed port
WORKDIR	        Set working directory
VOLUME   	Define mount points
ARG	      Build-time variables
USER	      Set default user
HEALTHCHECK	Define container health check

---------------------------------------------------------------------------------------

###learning #docker #dokcerfile #devops #newtodevops 


              |

